{"version":3,"sources":["components/Basic/Loading.jsx","components/Quiz/components/QuizToggle.jsx","components/Quiz/components/Questions.jsx","components/Quiz/components/Options.jsx","components/Quiz/components/Score.jsx","components/Quiz/Quiz.jsx","App.js","index.js"],"names":["LoadingSpin","size","QuizToggle","props","setIndex","setQuestionData","setViewed","setLoading","Data","a","Axios","get","incomingData","data","results","console","error","className","onClick","e","preventDefault","Questions","question","totalQuestions","index","Options","useState","an","setAn","correctOption","setCorrectOption","answers","setResult","hintNum","setHintNum","log","useEffect","correct_answer","incorrect_answers","flat","arr","shuffleArray","array","sort","Math","random","Array","isArray","map","item","ind","option","key","floor","length","alert","style","display","OptionItem","memo","Score","rightAnswer","setRightAnswer","score","setGameOver","icon","SmileOutlined","title","toFixed","extra","type","Quiz","questionData","Viewed","loading","result","gameOver","questions","Content","Layout","Header","Footer","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4edd5d61.chunk.js","sourcesContent":["import React from 'react';\nimport { Spin } from 'antd';\nexport default function LoadingSpin() {\n  return <Spin size='large' />;\n}\n","import React, { Fragment } from 'react';\nimport Axios from 'axios';\nimport { Button } from 'antd';\nimport '../style/quizToggle.css';\nexport default function QuizToggle(props) {\n  const { setIndex, setQuestionData, setViewed, setLoading } = props;\n  const Data = async () => {\n    //get question data after click start\n    try {\n      setLoading(true);\n      const incomingData = await Axios.get(\n        `https://run.mocky.io/v3/52f2bec8-450c-469f-b339-f34314cd0826`\n      );\n      setQuestionData(incomingData.data.results);\n      setLoading(false);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <Fragment>\n      <h1 className='title'>Quiz</h1>\n\n      <Button\n        className='toggle'\n        onClick={(e) => {\n          e.preventDefault();\n          Data();\n          setViewed(false);\n          setIndex(0);\n        }}\n      >\n        Start\n      </Button>\n    </Fragment>\n  );\n}\n","import React from 'react';\nimport '../style/questions.css';\nimport { Descriptions, Alert } from 'antd';\nexport default function Questions(props) {\n  const { question, totalQuestions, index } = props;\n  return (\n    <div className='question'>\n      {` (${index + 1}/ ${totalQuestions})`}\n      {<br />}\n      {question}\n    </div>\n  );\n}\n","import React, { useState, useEffect, memo } from 'react';\nimport { Button, Alert } from 'antd';\nimport '../style/options.css';\nexport default function Options(props) {\n  const [an, setAn] = useState([]);\n  const [correctOption, setCorrectOption] = useState(null);\n  const { answers, index, setIndex, setResult, hintNum, setHintNum } = props;\n  console.log(index);\n  useEffect(() => {\n    if (answers.correct_answer) {\n      setAn([answers.correct_answer, answers.incorrect_answers].flat());\n      setCorrectOption(answers.correct_answer);\n    }\n  }, [index]);\n  // select correct answer and shuffle array\n  const shuffleArray = (array) => {\n    return array.sort(() => Math.random() - 0.5);\n  };\n\n  // check array avoid error before user click start\n  const arrayCheck = (arr) => {\n    return Array.isArray(arr) ? arr : [];\n  };\n  const hint = () => {\n    let random = Math.floor(Math.random() * answers.incorrect_answers.length);\n    //select one incorrect question\n    if (an.length > 2 && hintNum > 0) {\n      setAn(\n        shuffleArray([\n          answers.correct_answer,\n          answers.incorrect_answers[random],\n        ])\n      );\n      setHintNum(hintNum - 1);\n    } else if (an.length <= 2) {\n      alert('You can only remove once');\n    } else {\n      alert('You have used up all the tips');\n    }\n  };\n  return (\n    <div className='options'>\n      {shuffleArray(arrayCheck(an)).map((item, ind) => (\n        <OptionItem\n          option={item}\n          correctOption={correctOption}\n          index={index}\n          setIndex={setIndex}\n          setResult={setResult}\n          key={ind}\n        />\n      ))}\n      <div>\n        <Button\n          onClick={hint}\n          style={{ display: answers.correct_answer ? 'block' : 'none' }}\n        >\n          Click ME to remove two incorrect answers <br /> You have &#160;\n          <span className='hintNum'> {hintNum} </span>&#160; times\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nconst OptionItem = memo(function OptionItem(props) {\n  const { option, correctOption, index, setIndex, setResult } = props;\n\n  const selectOption = () => {\n    setIndex(index + 1); // move to next question\n    setResult(correctOption === option); // check answer\n  };\n  return <Button onClick={selectOption}>{option}</Button>;\n});\n","import React from 'react';\nimport { Button, Result } from 'antd';\nimport { SmileOutlined } from '@ant-design/icons';\nimport '../style/score.css';\nexport default function Score(props) {\n  const {\n    rightAnswer,\n    setRightAnswer,\n    totalQuestions,\n    score,\n    setGameOver,\n    setViewed,\n    setHintNum,\n  } = props;\n  const restart = () => {\n    setViewed(true);\n    setGameOver(false);\n    setRightAnswer(0);\n    setHintNum(2);\n  };\n  return (\n    <div>\n      <Result\n        icon={<SmileOutlined />}\n        title={\n          <div>\n            <h1>\n              You got {rightAnswer} out of {totalQuestions}{' '}\n            </h1>\n            <h2>\n              Your score: {''}\n              {score.toFixed(2) * 100}\n            </h2>\n          </div>\n        }\n        extra={\n          <Button className='reStart' type='primary' onClick={restart}>\n            Restart\n          </Button>\n        }\n      />\n    </div>\n  );\n}\n","import React, { useState, useEffect, Fragment } from 'react';\nimport LoadingSpin from '../Basic/Loading';\nimport QuizToggle from './components/QuizToggle';\nimport Questions from './components/Questions';\nimport Options from './components/Options';\nimport Score from './components/Score';\nimport '../../style/Quiz.css';\n\nconst Quiz = () => {\n  const [questionData, setQuestionData] = useState([]);\n  const [Viewed, setViewed] = useState(true); //  started answer questions\n  const [loading, setLoading] = useState(false);\n  const [result, setResult] = useState(null); // final result\n  const [index, setIndex] = useState(0);\n  const [hintNum, setHintNum] = useState(2);\n  const [rightAnswer, setRightAnswer] = useState(0); // counting the correct answer\n  const [gameOver, setGameOver] = useState(false);\n  const questions = questionData.map(({ question }) => [question]); // loading questions and options\n\n  const answers = questionData.map((item) => ({\n    correct_answer: item.correct_answer,\n    incorrect_answers: item.incorrect_answers,\n  }));\n\n  useEffect(() => {\n    if (result === true) {\n      setRightAnswer(rightAnswer + 1);\n    }\n\n    if (index !== 0 && index === questions.length && index) {\n      setGameOver(true);\n    }\n  }, [index]);\n  return (\n    <Fragment>\n      {Viewed && (\n        <QuizToggle\n          loading={loading}\n          setIndex={setIndex}\n          setQuestionData={setQuestionData}\n          setViewed={setViewed}\n          setLoading={setLoading}\n        />\n      )}\n      {/*   display questions  after user click start*/}\n      {!Viewed &&\n        !gameOver &&\n        (loading ? (\n          <LoadingSpin />\n        ) : (\n          <div className='quizContainer'>\n            <Questions\n              question={questions[index]}\n              totalQuestions={questions.length}\n              index={index}\n              className='questions'\n            />\n            <Options\n              hintNum={hintNum}\n              setHintNum={setHintNum}\n              answers={answers[index] || {}}\n              index={index}\n              setIndex={setIndex}\n              setResult={setResult}\n              className='options'\n            />\n          </div>\n        ))}\n\n      {gameOver && (\n        <Score\n          totalQuestions={questions.length}\n          setRightAnswer={setRightAnswer}\n          setViewed={setViewed}\n          setHintNum={setHintNum}\n          setGameOver={setGameOver}\n          rightAnswer={rightAnswer}\n          score={rightAnswer / index}\n        />\n      )}\n    </Fragment>\n  );\n};\n\nexport default Quiz;\n","import React from 'react';\nimport 'antd/dist/antd.css';\nimport './App.css';\nimport Quiz from './components/Quiz/Quiz';\nimport { Layout } from 'antd';\nconst { Header, Content, Footer } = Layout;\nfunction App() {\n  return (\n    <div className='App'>\n      <Layout className='layout'>\n        <Content>\n          <div className='site-layout-content'>\n            <Quiz className='quiz' />\n          </div>\n        </Content>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './style/base.css';\nimport App from './App';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}