{"version":3,"sources":["components/Basic/Loading.jsx","components/Quiz/components/QuizToggle.jsx","components/Quiz/components/Questions.jsx","components/Quiz/components/Options.jsx","components/Quiz/components/Score.jsx","components/Quiz/Quiz.jsx","App.js","index.js"],"names":["LoadingSpin","size","QuizToggle","props","setIndex","setQuestionData","setViewed","setLoading","Data","a","response_code","results","question","correct_answer","incorrect_answers","err","console","error","className","onClick","e","preventDefault","Questions","totalQuestions","index","Options","useState","an","setAn","correctOption","setCorrectOption","answers","setResult","hintNum","setHintNum","log","useEffect","flat","arr","shuffleArray","array","sort","Math","random","Array","isArray","map","item","ind","option","key","floor","length","alert","style","display","OptionItem","memo","Score","rightAnswer","setRightAnswer","score","setGameOver","icon","SmileOutlined","title","toFixed","extra","type","Quiz","questionData","Viewed","loading","result","gameOver","questions","Content","Layout","Header","Footer","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6817f506.chunk.js","sourcesContent":["import React from 'react';\nimport { Spin } from 'antd';\nexport default function LoadingSpin() {\n  return <Spin size='large' />;\n}\n","import React, { Fragment } from 'react';\nimport Axios from 'axios';\nimport { Button } from 'antd';\nimport '../style/quizToggle.css';\nexport default function QuizToggle(props) {\n  const { setIndex, setQuestionData, setViewed, setLoading } = props;\n  const Data = async () => {\n    //get question data after click start\n    try {\n      setLoading(true);\n\n      setQuestionData({\n        response_code: 0,\n        results: [\n          {\n            question:\n              \"Grand Central Terminal, Park Avenue, New York is the world's\",\n            correct_answer: 'largest railway station',\n            incorrect_answers: [\n              'highest railway station',\n              'longest railway station',\n              'None of the above',\n            ],\n          },\n          {\n            question:\n              'First human heart transplant operation conducted by Dr. Christiaan Barnard on Louis Washkansky, was conducted in',\n            correct_answer: '1967',\n            incorrect_answers: ['1968', '1958', '1922'],\n          },\n          {\n            question:\n              'Eritrea, which became the 182nd member of the UN in 1993, is in the continent of',\n            correct_answer: 'Africa',\n            incorrect_answers: ['Asia', 'Europe', 'Australia'],\n          },\n          {\n            question: 'Garampani sanctuary is located at',\n            correct_answer: 'Diphu, Assam',\n            incorrect_answers: [\n              'Kohima, Nagaland',\n              'Junagarh, Gujarat',\n              'Gangtok, Sikkim',\n            ],\n          },\n          {\n            question: 'Hitler party which came into power in 1933 is known as',\n            correct_answer: 'Nazi Party',\n            incorrect_answers: [\n              'Labour Party',\n              'Ku-Klux-Klan',\n              'Democratic Party',\n            ],\n          },\n          {\n            question: 'Golf player Vijay Singh belongs to which country?',\n            correct_answer: 'Fiji',\n            incorrect_answers: ['USA', 'India', 'UK'],\n          },\n          {\n            question: 'Fastest shorthand writer was',\n            correct_answer: 'Dr. G. D. Bist',\n            incorrect_answers: ['J.R.D. Tata', 'J.M. Tagore', 'Khudada Khan'],\n          },\n          {\n            question: 'What does LTS stand for in the software market?',\n            correct_answer: 'Long Term Support',\n            incorrect_answers: [\n              'Long Taco Service',\n              'Ludicrous Transfer Speed',\n              'Ludicrous Turbo Speed',\n            ],\n          },\n          {\n            question: 'This mobile OS held the largest market share in 2012.',\n            correct_answer: 'iOS',\n            incorrect_answers: ['Android', 'BlackBerry', 'Symbian'],\n          },\n          {\n            question: 'What does the computer software acronym JVM stand for?',\n            correct_answer: 'Java Virtual Machine',\n            incorrect_answers: [\n              'Java Vendor Machine',\n              'Java Visual Machine',\n              'Just Virtual Machine',\n            ],\n          },\n        ],\n      });\n      setLoading(false);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <Fragment>\n      <h1 className='title'>Quiz</h1>\n\n      <Button\n        className='toggle'\n        onClick={(e) => {\n          e.preventDefault();\n          Data();\n          setViewed(false);\n          setIndex(0);\n        }}\n      >\n        Start\n      </Button>\n    </Fragment>\n  );\n}\n","import React from 'react';\nimport '../style/questions.css';\nimport { Descriptions, Alert } from 'antd';\nexport default function Questions(props) {\n  const { question, totalQuestions, index } = props;\n  return (\n    <div className='question'>\n      {` (${index + 1}/ ${totalQuestions})`}\n      {<br />}\n      {question}\n    </div>\n  );\n}\n","import React, { useState, useEffect, memo } from 'react';\nimport { Button, Alert } from 'antd';\nimport '../style/options.css';\nexport default function Options(props) {\n  const [an, setAn] = useState([]);\n  const [correctOption, setCorrectOption] = useState(null);\n  const { answers, index, setIndex, setResult, hintNum, setHintNum } = props;\n  console.log(index);\n  useEffect(() => {\n    if (answers.correct_answer) {\n      setAn([answers.correct_answer, answers.incorrect_answers].flat());\n      setCorrectOption(answers.correct_answer);\n    }\n  }, [index]);\n  // select correct answer and shuffle array\n  const shuffleArray = (array) => {\n    return array.sort(() => Math.random() - 0.5);\n  };\n\n  // check array avoid error before user click start\n  const arrayCheck = (arr) => {\n    return Array.isArray(arr) ? arr : [];\n  };\n  const hint = () => {\n    let random = Math.floor(Math.random() * answers.incorrect_answers.length);\n    //select one incorrect question\n    if (an.length > 2 && hintNum > 0) {\n      setAn(\n        shuffleArray([\n          answers.correct_answer,\n          answers.incorrect_answers[random],\n        ])\n      );\n      setHintNum(hintNum - 1);\n    } else if (an.length <= 2) {\n      alert('You can only remove once');\n    } else {\n      alert('You have used up all the tips');\n    }\n  };\n  return (\n    <div className='options'>\n      {shuffleArray(arrayCheck(an)).map((item, ind) => (\n        <OptionItem\n          option={item}\n          correctOption={correctOption}\n          index={index}\n          setIndex={setIndex}\n          setResult={setResult}\n          key={ind}\n        />\n      ))}\n      <div>\n        <Button\n          onClick={hint}\n          style={{ display: answers.correct_answer ? 'block' : 'none' }}\n        >\n          Click ME to remove two incorrect answers <br /> You have &#160;\n          <span className='hintNum'> {hintNum} </span>&#160; times\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nconst OptionItem = memo(function OptionItem(props) {\n  const { option, correctOption, index, setIndex, setResult } = props;\n\n  const selectOption = () => {\n    setIndex(index + 1); // move to next question\n    setResult(correctOption === option); // check answer\n  };\n  return <Button onClick={selectOption}>{option}</Button>;\n});\n","import React from 'react';\nimport { Button, Result } from 'antd';\nimport { SmileOutlined } from '@ant-design/icons';\nimport '../style/score.css';\nexport default function Score(props) {\n  const {\n    rightAnswer,\n    setRightAnswer,\n    totalQuestions,\n    score,\n    setGameOver,\n    setViewed,\n    setHintNum,\n  } = props;\n  const restart = () => {\n    setViewed(true);\n    setGameOver(false);\n    setRightAnswer(0);\n    setHintNum(2);\n  };\n  return (\n    <div>\n      <Result\n        icon={<SmileOutlined />}\n        title={\n          <div>\n            <h1>\n              You got {rightAnswer} out of {totalQuestions}{' '}\n            </h1>\n            <h2>\n              Your score: {''}\n              {score.toFixed(2) * 100}\n            </h2>\n          </div>\n        }\n        extra={\n          <Button className='reStart' type='primary' onClick={restart}>\n            Restart\n          </Button>\n        }\n      />\n    </div>\n  );\n}\n","import React, { useState, useEffect, Fragment } from 'react';\nimport LoadingSpin from '../Basic/Loading';\nimport QuizToggle from './components/QuizToggle';\nimport Questions from './components/Questions';\nimport Options from './components/Options';\nimport Score from './components/Score';\nimport '../../style/Quiz.css';\n\nconst Quiz = () => {\n  const [questionData, setQuestionData] = useState([]);\n  const [Viewed, setViewed] = useState(true); //  started answer questions\n  const [loading, setLoading] = useState(false);\n  const [result, setResult] = useState(null); // final result\n  const [index, setIndex] = useState(0);\n  const [hintNum, setHintNum] = useState(2);\n  const [rightAnswer, setRightAnswer] = useState(0); // counting the correct answer\n  const [gameOver, setGameOver] = useState(false);\n  const questions = questionData.map(({ question }) => [question]); // loading questions and options\n\n  const answers = questionData.map((item) => ({\n    correct_answer: item.correct_answer,\n    incorrect_answers: item.incorrect_answers,\n  }));\n\n  useEffect(() => {\n    if (result === true) {\n      setRightAnswer(rightAnswer + 1);\n    }\n\n    if (index !== 0 && index === questions.length && index) {\n      setGameOver(true);\n    }\n  }, [index]);\n  return (\n    <Fragment>\n      {Viewed && (\n        <QuizToggle\n          loading={loading}\n          setIndex={setIndex}\n          setQuestionData={setQuestionData}\n          setViewed={setViewed}\n          setLoading={setLoading}\n        />\n      )}\n      {/*   display questions  after user click start*/}\n      {!Viewed &&\n        !gameOver &&\n        (loading ? (\n          <LoadingSpin />\n        ) : (\n          <div className='quizContainer'>\n            <Questions\n              question={questions[index]}\n              totalQuestions={questions.length}\n              index={index}\n              className='questions'\n            />\n            <Options\n              hintNum={hintNum}\n              setHintNum={setHintNum}\n              answers={answers[index] || {}}\n              index={index}\n              setIndex={setIndex}\n              setResult={setResult}\n              className='options'\n            />\n          </div>\n        ))}\n\n      {gameOver && (\n        <Score\n          totalQuestions={questions.length}\n          setRightAnswer={setRightAnswer}\n          setViewed={setViewed}\n          setHintNum={setHintNum}\n          setGameOver={setGameOver}\n          rightAnswer={rightAnswer}\n          score={rightAnswer / index}\n        />\n      )}\n    </Fragment>\n  );\n};\n\nexport default Quiz;\n","import React from 'react';\nimport 'antd/dist/antd.css';\nimport './App.css';\nimport Quiz from './components/Quiz/Quiz';\nimport { Layout } from 'antd';\nconst { Header, Content, Footer } = Layout;\nfunction App() {\n  return (\n    <div className='App'>\n      <Layout className='layout'>\n        <Content>\n          <div className='site-layout-content'>\n            <Quiz className='quiz' />\n          </div>\n        </Content>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './style/base.css';\nimport App from './App';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}